def get_matchup_stats(batter,pitcher,count="",outs="",inning="",runners_on=[],tm_hitting="",tm_pitching="",score_tm_hitting="",score_tm_pitching="",batter_stands="",pitcher_throws="",bat_order_pos="",isLeadoff=False,pitch_num="",isFirstIP=False):
    # batter=547989 (Jose Abreu),pitcher=453562 (Jake Arietta)
    # EDIT TERMINAL INPUT HERE: 
    # batter=547989,batter_stands="right",bat_order_pos="2",isLeadoff=True,pitcher=453562,pitcher_throws="left",count="01",outs="1",inning="5",runners_on=[3],tm_hitting=145,tm_pitching=112,score_tm_hitting="3",score_tm_pitching="3",pitch_num=57
    """Retrieve batter's and pitcher's splits for the current matchup situation

    'batter' and 'pitcher' values should be their respective mlbam IDs
    """
   #
    # For BATTER: "statSplits" (for given situation),"careerStatSplits","vsTeam" (totals/current season), "vsPlayer"
    # relevant HITTING sitCodes -> h,a,vl,vr,sah,sbh,sti,b[1-9]/lo,ph,i[01-09/ix],e/ron/r[0,123,1,12,13,2,23,3],ron2,risp,risp2,o[0-2],fp/ac/bc/ec/2s/fc/c[00,01,02,10,11,12,20,21,22,30,31,32],zn[01-14]
    #       pitchTypes & sitCodes -> 
    #       FASTBALL/pfa, FOUR-SEAM_FB/pff, TWO-SEAM_FB/pft, CUTTER/pfc, SINKER/psi, SPLITTER/pfs, FORKBALL/pfo, SLIDER/psl,
    #       CURVEBALL/pcu, KNUCKLE-CURVE/pkc, SCREWBALL/psc, GYROBALL/pgy, CHANGEUP/pch, KNUCKLE/pkn, EEPHUS/pep
    #       (could also maybe add splits for "vsLeft/Right and zone","outs and zone"/"count & zone"/"runnersOn & zone" e.g. - o107 = 1 out Zone 7) 
    #           --  MAYBE SHOW IN "MATCHUP GRAPHIC"! (put "AVG." stat in each respective zone!!!)
    #           -- FORMATS: o107, ec01/ac01/bc/01, r001 (bases empty zone 1), r210 (runner on zone 10), rsp08 (risp zone 08)
    #           -- PRIORITY ORDER: "vl/vr", count&zone, outs&zone, runnersOn&zone
    # 
    # For PITCHER: mostly the same, but might add a few more -> pitch count (grouped), fip (first inning pitched)
    # 
    # **In an effort to not clutter the screen, USER should have option to select on the front-end which stat is being displayed (maybe have a couple defaults?)
   # 
    if score_tm_hitting == "":score_tm_hitting = 0
    else: score_tm_hitting = int(score_tm_hitting)

    if score_tm_pitching == "":score_tm_pitching = 0
    else: score_tm_pitching = int(score_tm_pitching)

    count_balls = int(count[0])
    count_strikes = int(count[-1])
    outs = int(outs)
    inning = int(inning)
    runners_on = runners_on # need to figure out how I'll be retrieving this
    # score_tm_hitting
    # score_tm_pitching
    # batter_stands - hopefully available on game page -- you could ALSO retrieve this by getting ALL the data first & sorting it out after
    # pitcher_throws - hopefully available on game page -- you could ALSO retrieve this by getting ALL the data first & sorting it out after

    zonesList = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14']

   # SETTING UP VALUES FOR 'batCodes' ==========================================
    batCodes = [] # ---- 'batCodes' defined ----

    # ASSIGNING "batCodes" (sitCodes) to retrieve for BATTER
    
    if "l" in pitcher_throws.lower():
        batCodes.append("vl")
    elif "r" in pitcher_throws.lower():
        batCodes.append("vr")


    cCount = f"c{count_balls}{count_strikes}"
    cOuts = f"o{outs}"
    cInns = f"i0{inning}"
    cBatOrder = f"b{bat_order_pos}"

    # Outs Code
    if outs == 3:pass
    else:
        batCodes.append(cOuts)

    # Inning Code
    if inning <= 9:
        batCodes.append(cInns)
    else:batCodes.append("ix")

    # Batting Order Code
    if isLeadoff is True:
        batCodes.append("lo")
    batCodes.append(cBatOrder)

    # Team Ahead/Behind Code
    if score_tm_hitting > score_tm_pitching:
        batCodes.append("sah")
    elif score_tm_hitting < score_tm_pitching:
        batCodes.append("sbh")
    else:
        batCodes.append("sti")

    # Count Codes
    if count_strikes == 2:
        batCodes.append("2s")
    if count_balls == count_strikes and cCount != "c00": # even count (NOT first pitch)
        batCodes.append("ec")
        batCodes.append(cCount)
    elif count_balls > count_strikes and cCount != "c32": # batter ahead (NOT a full count)
        batCodes.append("ac")
        batCodes.append(cCount)
    elif count_balls < count_strikes: # batter behind
        batCodes.append("bc")
        batCodes.append(cCount)
    elif count_balls == 3 & count_strikes == 2: # full count
        batCodes.append("fc")
    elif count_balls == 0 & count_strikes == 0: # first pitch
        batCodes.append("fp")

    
    # Runners-On Codes
    if len(runners_on) == 0:                        # bases empty
        batCodes.append("r0")
    if len(runners_on) > 0:                         # runner(s) on
        batCodes.append("ron")
        if outs == 2:
            batCodes.append("ron2")                 # runner(s) on (2 outs)
    if 2 in runners_on or 3 in runners_on:          # runner(s) in scoring position
        batCodes.append("risp")
        if outs == 2:                               # runner(s) in scoring position (2 outs)
            batCodes.append("risp2")

    if len(runners_on) == 1:    # (ONE base occupied)
        if 1 in runners_on:                         # runner on 1st
            batCodes.append("r1")
        elif 2 in runners_on:                       # runner on 2nd
            batCodes.append("r2")
        elif 3 in runners_on:                       # runner on 3rd
            batCodes.append("r3")
    elif len(runners_on) == 2:  # (TWO bases occupied)
        if 1 in runners_on and 2 in runners_on:     # runners on 1st and 2nd
            batCodes.append("r12")
        elif 1 in runners_on and 3 in runners_on:   # runners on 1st and 3rd
            batCodes.append("r13")
        elif 2 in runners_on and 3 in runners_on:   # runners on 2nd and 3rd
            batCodes.append("r23")
    elif len(runners_on) == 3:                      # runners on 1st, 2nd, and 3rd (BASES LOADED)
        batCodes.append("r123")

    # ---- ZONE Codes ----

    # All Zones
    for znLoc in zonesList:
        batCodes.append(f"zn{znLoc}")

    # Outs
    for out_num in [0,1,2]: # add zone split for each "out count"
        for znLoc in zonesList:
            batCodes.append(f"o{out_num}{znLoc}")

    # Count situation (ahead, behind, and even)
    for znLoc in zonesList:
        batCodes.append(f"ac{znLoc}")
        batCodes.append(f"bc{znLoc}")
        batCodes.append(f"ec{znLoc}")
    
    # vsRHP/LHP
    for znLoc in zonesList:
        batCodes.append(f"vr{znLoc}")
        batCodes.append(f"vl{znLoc}")

    # Current Bases occupied
    if "r0" in batCodes:
        for znLoc in zonesList:
            batCodes.append(f"r0{znLoc}")
    if "ron" in batCodes:
        for znLoc in zonesList:
            batCodes.append(f"ron{znLoc}")
    if "risp" in batCodes:
        for znLoc in zonesList:
            batCodes.append(f"rsp{znLoc}")
    if "r123" in batCodes:
        for znLoc in zonesList:
            batCodes.append(f"rbl{znLoc}")

    batCodes_str = ",".join(batCodes)
   #

   # SETTING UP VALUES FOR 'pitchCodes' ==========================================
    if pitch_num == "":pitch_num = 0
    else: pitch_num = int(pitch_num)
    pitchCodes = [] # ---- 'pitchCodes' defined ----

    # ASSIGNING "pitchCodes" (sitCodes) to retrieve for BATTER
    
    if "l" in batter_stands.lower():
        pitchCodes.append("vl")
    elif "r" in batter_stands.lower():
        pitchCodes.append("vr")

    # ALREADY DEFINED ABOVE (HERE FOR REFERENCE):
    # cCount = f"c{count_balls}{count_strikes}"
    # cOuts = f"o{outs}"
    # cInns = f"i0{inning}"
    # cBatOrder = f"b{bat_order_pos}"

    # Outs Code
    if outs == 3:pass
    else:
        pitchCodes.append(cOuts)

    # Inning Code
    if inning <= 9:
        pitchCodes.append(cInns)
    else:pitchCodes.append("ix")

    if isFirstIP is True: # if this is pitcher's first inning of the game (ONLY FOR PITCHER)
        pitchCodes.append("fip")

    # Batting Order Code
    if isLeadoff is True:
        pitchCodes.append("lo")
    pitchCodes.append(cBatOrder)

    # Team Ahead/Behind Code
    if score_tm_pitching > score_tm_hitting:
        pitchCodes.append("sah")
    elif score_tm_pitching < score_tm_hitting:
        pitchCodes.append("sbh")
    else:
        pitchCodes.append("sti")

    # Count Codes
    if count_strikes == 2:
        pitchCodes.append("2s")
    if count_balls == count_strikes and cCount != "c00": # even count (NOT first pitch)
        pitchCodes.append("ec")
        pitchCodes.append(cCount)
    elif count_balls < count_strikes and cCount != "c32": # pitcher ahead
        pitchCodes.append("ac")
        pitchCodes.append(cCount)
    elif count_balls > count_strikes: # pitcher behind
        pitchCodes.append("bc")
        pitchCodes.append(cCount)
    elif count_balls == 3 & count_strikes == 2: # full count
        pitchCodes.append("fc")
    elif count_balls == 0 & count_strikes == 0: # first pitch
        pitchCodes.append("fp")

    
    # Runners-On Codes
    if len(runners_on) == 0:                        # bases empty
        pitchCodes.append("r0")
    if len(runners_on) > 0:                         # runner(s) on
        pitchCodes.append("ron")
        if outs == 2:
            pitchCodes.append("ron2")                 # runner(s) on (2 outs)
    if 2 in runners_on or 3 in runners_on:          # runner(s) in scoring position
        pitchCodes.append("risp")
        if outs == 2:                               # runner(s) in scoring position (2 outs)
            pitchCodes.append("risp2")

    if len(runners_on) == 1:    # (ONE base occupied)
        if 1 in runners_on:                         # runner on 1st
            pitchCodes.append("r1")
        elif 2 in runners_on:                       # runner on 2nd
            pitchCodes.append("r2")
        elif 3 in runners_on:                       # runner on 3rd
            pitchCodes.append("r3")
    elif len(runners_on) == 2:  # (TWO bases occupied)
        if 1 in runners_on and 2 in runners_on:     # runners on 1st and 2nd
            pitchCodes.append("r12")
        elif 1 in runners_on and 3 in runners_on:   # runners on 1st and 3rd
            pitchCodes.append("r13")
        elif 2 in runners_on and 3 in runners_on:   # runners on 2nd and 3rd
            pitchCodes.append("r23")
    elif len(runners_on) == 3:                      # runners on 1st, 2nd, and 3rd (BASES LOADED)
        pitchCodes.append("r123")

    # Pitch Count Code (ONLY FOR PITCHER)
    if pitch_num <= 15:
        pitchCodes.append("pi001")
    elif 16 <= pitch_num <= 30:
        pitchCodes.append("pi016")
    elif 31 <= pitch_num <= 45:
        pitchCodes.append("pi031")
    elif 46 <= pitch_num <= 60:
        pitchCodes.append("pi046")
    elif 61 <= pitch_num <= 75:
        pitchCodes.append("pi061")
    elif 76 <= pitch_num <= 90:
        pitchCodes.append("pi076")
    elif 91 <= pitch_num <= 105:
        pitchCodes.append("pi091")
    elif 106 <= pitch_num <= 120:
        pitchCodes.append("pi106")
    elif pitch_num > 120:
        pitchCodes.append("pi121")

    # --- ZONE Codes ---

    # All Zones
    for znLoc in zonesList:
        pitchCodes.append(f"zn{znLoc}")

    # Outs
    for out_num in [0,1,2]: # add zone split for each "out count"
        for znLoc in zonesList:
            pitchCodes.append(f"o{out_num}{znLoc}")

    # Count situation (ahead, behind, and even)
    for znLoc in zonesList:
        pitchCodes.append(f"ac{znLoc}")
        pitchCodes.append(f"bc{znLoc}")
        pitchCodes.append(f"ec{znLoc}")
    
    # vsRHP/LHP
    for znLoc in zonesList:
        pitchCodes.append(f"vr{znLoc}")
        pitchCodes.append(f"vl{znLoc}")

    # Current Bases occupied
    if "r0" in pitchCodes:
        for znLoc in zonesList:
            pitchCodes.append(f"r0{znLoc}")
    if "ron" in pitchCodes:
        for znLoc in zonesList:
            pitchCodes.append(f"ron{znLoc}")
    if "risp" in pitchCodes:
        for znLoc in zonesList:
            pitchCodes.append(f"rsp{znLoc}")
    if "r123" in pitchCodes:
        for znLoc in zonesList:
            pitchCodes.append(f"rbl{znLoc}")

    # Pitch Types (ONLY FOR PITCHER) - NEED PITCH ARSENAL


    pitchCodes_str = ",".join(pitchCodes)
   #


    statTypes = "careerStatSplits,statSplits,vsPlayer"

    # statTypes = "careerStatSplits,statSplits,vsTeam,vsPlayer" # "vsTeam" will display both 'vsTeam' AND 'vsTeamTotal'
    # 'vsTeam' taking a back seat for now
    # batter_url = BASE + f"/people?personIds={batter}&hydrate=stats(type=[{statTypes}],group=[hitting],sitCodes=[{batCodes}],opposingTeamId={tm_pitching},opposingPlayerId={pitcher})"
    batter_url = BASE + f"/people?personIds={batter}&hydrate=stats(type=[{statTypes}],group=[hitting],sitCodes=[{batCodes_str}],opposingTeamId={tm_pitching},opposingPlayerId={pitcher})"
    pitcher_url = BASE + f"/people?personIds={pitcher}&hydrate=stats(type=[{statTypes}],group=[pitching],sitCodes=[{pitchCodes_str}],opposingTeamId={tm_hitting},opposingPlayerId={batter})"

    with requests.Session() as sesh:
        print(batter_url)
        print(pitcher_url)
        batter_resp = sesh.get(batter_url).json()
        pitcher_resp = sesh.get(pitcher_url).json()

    batter_info = batter_resp["people"][0]
    pitcher_info = pitcher_resp["people"][0]

    hit_stats = {
        "category":"",
        "groundOuts":"",
        "airOuts":"",
        "runs":"",
        "homeRuns":"",
        "strikeOuts":"",
        "baseOnBalls":"",
        "intentionalWalks":"",
        "hits":"",
        "avg":"",
        "atBats":"",
        "obp":"",
        "plateAppearances":"",
        "totalBases":"",
        "rbi":"",
        "sacBunts":"",
        "sacFlies":""
        }

    h_dict = {
        "name":"",
        "bats":"",
        "careerSplits":{
            "outs":{},
            "inning":{},
            "count":{},
            "runners_on":{},
            "score_sit":{},
            "batting_order":{},
            "zones":{
                "all":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "outs":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "count":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "throws":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "runners":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                    },
                
                "pitch_types":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                    }
                },
            },
        "seasonSplits":{
            "outs":{},
            "inning":{},
            "count":{},
            "runners_on":{},
            "score_sit":{},
            "batting_order":{},
            "zones":{
                "all":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "outs":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "count":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "throws":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "runners":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                    },
                
                "pitch_types":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                    }
                },
            },
        "vsPlayerTotal":{
            "outs":{},
            "inning":{},
            "count":{},
            "runners_on":{},
            "score_sit":{},
            "batting_order":{}
            },
        "vsTeam":{
            "outs":{},
            "inning":{},
            "count":{},
            "runners_on":{},
            "score_sit":{},
            "batting_order":{}
            },
        "vsTeamTotal":{
            "outs":{},
            "inning":{},
            "count":{},
            "runners_on":{},
            "score_sit":{},
            "batting_order":{}
            }
        }
    
    out_codes = ["o0","o1","o2"]
    inning_codes = ['i01','i02','i03','i04','i05','i06','i07','i08','i09','ix']
    count_codes = ['fp','ac','bc','ec','2s','fc','c00','c01','c02','c10','c11','c12','c20','c21','c22','c30','c31','c32']
    runnersOn_codes = ['e','r0','r123','r1','r12','r13','r2','r23','r3','ron','ron2','risp','risp2']
    scoreSituation_codes = ['sah','sbh','sti']
    battingOrder_codes = ['b1','b2','b3','b4','b5','b6','b7','b8','b9','lo']
    zone_codes = []
    # Parse BATTER response

    for stat_group in batter_info["stats"]:
        statType = stat_group["type"]["displayName"]
        if statType == "careerStatSplits":

            for split in stat_group["splits"]:
                split_desc = split["split"]["description"]
                split_code = split["split"]["code"]
                stat_data = split["stat"]

                code = split_code

                key_label = f"{split_desc} ({code})"

                if code in out_codes:
                    if key_label not in h_dict["careerSplits"]["outs"].keys():
                        h_dict["careerSplits"]["outs"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["careerSplits"]["outs"][key_label][f] = stat_data.get(f,"--")
                elif code in inning_codes:
                    if key_label not in h_dict["careerSplits"]["inning"].keys():
                        h_dict["careerSplits"]["inning"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["careerSplits"]["inning"][key_label][f] = stat_data.get(f,"--")
                elif code in runnersOn_codes:
                    if key_label not in h_dict["careerSplits"]["runners_on"].keys():
                        h_dict["careerSplits"]["runners_on"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["careerSplits"]["runners_on"][key_label][f] = stat_data.get(f,"--")
                elif code in count_codes:
                    if key_label not in h_dict["careerSplits"]["count"].keys():
                        h_dict["careerSplits"]["count"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["careerSplits"]["count"][key_label][f] = stat_data.get(f,"--")
                elif code in scoreSituation_codes:
                    if key_label not in h_dict["careerSplits"]["score_sit"].keys():
                        h_dict["careerSplits"]["score_sit"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["careerSplits"]["score_sit"][key_label][f] = stat_data.get(f,"--")
                elif code in battingOrder_codes:
                    if key_label not in h_dict["careerSplits"]["batting_order"].keys():
                        h_dict["careerSplits"]["batting_order"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["careerSplits"]["batting_order"][key_label][f] = stat_data.get(f,"--")
                elif code in zone_codes:
                    if key_label not in h_dict["careerSplits"]["zones"].keys():
                        h_dict["careerSplits"]["zones"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["careerSplits"]["zones"][key_label][f] = stat_data.get(f,"--")

        if statType == "statSplits":

            for split in stat_group["splits"]:
                split_desc = split["split"]["description"]
                split_code = split["split"]["code"]
                stat_data = split["stat"]

                code = split_code

                key_label = f"{split_desc} ({code})"

                if code in out_codes:
                    if key_label not in h_dict["seasonSplits"]["outs"].keys():
                        h_dict["seasonSplits"]["outs"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["seasonSplits"]["outs"][key_label][f] = stat_data.get(f,"--")
                elif code in inning_codes:
                    if key_label not in h_dict["seasonSplits"]["inning"].keys():
                        h_dict["seasonSplits"]["inning"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["seasonSplits"]["inning"][key_label][f] = stat_data.get(f,"--")
                elif code in runnersOn_codes:
                    if key_label not in h_dict["seasonSplits"]["runners_on"].keys():
                        h_dict["seasonSplits"]["runners_on"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["seasonSplits"]["runners_on"][key_label][f] = stat_data.get(f,"--")
                elif code in count_codes:
                    if key_label not in h_dict["seasonSplits"]["count"].keys():
                        h_dict["seasonSplits"]["count"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["seasonSplits"]["count"][key_label][f] = stat_data.get(f,"--")
                elif code in scoreSituation_codes:
                    if key_label not in h_dict["seasonSplits"]["score_sit"].keys():
                        h_dict["seasonSplits"]["score_sit"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["seasonSplits"]["score_sit"][key_label][f] = stat_data.get(f,"--")
                elif code in battingOrder_codes:
                    if key_label not in h_dict["seasonSplits"]["batting_order"].keys():
                        h_dict["seasonSplits"]["batting_order"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["seasonSplits"]["batting_order"][key_label][f] = stat_data.get(f,"--")
                elif code in zone_codes:
                    if key_label not in h_dict["seasonSplits"]["zones"].keys():
                        h_dict["seasonSplits"]["zones"][key_label] = {}
                    for f in list(hit_stats.keys())[1:]:
                        h_dict["seasonSplits"]["zones"][key_label][f] = stat_data.get(f,"--")             


    pitch_stats = {
        "category":"",
        "groundOuts":"",
        "airOuts":"",
        "runs":"",
        "homeRuns":"",
        "strikeOuts":"",
        "baseOnBalls":"",
        "intentionalWalks":"",
        "hits":"",
        "atBats":"",
        "battersFaced":"",
        "hitBatsmen":"",
        "totalBases":"",
        "rbi":"",
        "pickoffs":"",
        "wildPitches":"",
        "sacBunts":"",
        "sacFlies":""}
    
    p_dict = {
        "name":"",
        "throws":"",
        "careerSplits":{
            "outs":pitch_stats,
            "inning":pitch_stats,
            "count":pitch_stats,
            "runners_on":pitch_stats,
            "score_sit":pitch_stats,
            "batting_order":pitch_stats,
            "zones":{
                "all":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "outs":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "count":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "throws":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                },
                "runners":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                    },
                
                "pitch_types":{
                    "zn01":{},
                    "zn02":{},
                    "zn03":{},
                    "zn04":{},
                    "zn05":{},
                    "zn06":{},
                    "zn07":{},
                    "zn08":{},
                    "zn09":{},
                    "zn10":{},
                    "zn11":{},
                    "zn12":{},
                    "zn13":{},
                    "zn14":{}
                    }
                },
            },
        "vsPlayerTotal":{
            "outs":pitch_stats,
            "inning":pitch_stats,
            "count":pitch_stats,
            "runners_on":pitch_stats,
            "score_sit":pitch_stats,
            "batting_order":pitch_stats
            },
        "vsTeam":{
            "outs":pitch_stats,
            "inning":pitch_stats,
            "count":pitch_stats,
            "runners_on":pitch_stats,
            "score_sit":pitch_stats,
            "batting_order":pitch_stats
            },
        "vsTeamTotal":{
            "outs":pitch_stats,
            "inning":pitch_stats,
            "count":pitch_stats,
            "runners_on":pitch_stats,
            "score_sit":pitch_stats,
            "batting_order":pitch_stats
            }
        }

    # Parse PITCHER response
    return h_dict
