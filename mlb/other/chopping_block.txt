class Franchise:
    """
    # Franchise

    teamID : str | int
        Team's official MLB ID
    """
    def __init__(self,teamID):
        _info = franchise.franchise_info(teamID)

        self.__franchise_df      = _info["franchise_df"]
        self.firstYear           = _info["firstYear"]
        self.recentYear          = _info["recentYear"]
        self.fullName            = _info["fullName"]
        self.locationName        = _info["locationName"]
        self.clubName            = _info["clubName"]
        self.mlbam               = _info["mlbam"]
        self.franchID            = _info["franchID"]
        self.bbrefID             = _info["bbrefID"]
        self.retroID             = _info["retroID"]
        self.fileCode            = _info["fileCode"]
        self.__lgDiv             = _info["lgDiv"]
        self.curr_venue_mlbam  = _info["venueCurrent_mlbam"]
        self.__venueList         = _info["venueList"]
        self.venues            = _info["venueDict"]

        self.__ybyRecords        = franchise.franchise_records(teamID)
        self.__ybyStats          = franchise.franchise_stats(self.mlbam)

        self.__total_GP          = self.__ybyRecords.G.astype("int").sum()
        self.__total_wins        = self.__ybyRecords.W.astype("int").sum()
        self.__total_losses      = self.__ybyRecords.L.astype("int").sum()
        self.gp                  = self.__total_GP
        self.w                   = self.__total_wins
        self.l                   = self.__total_losses

        # self.__postseason_appearances = _info["postseason_appearances"] # postseason appearance function is WIP

        self.__attrs = {
            "franchise":        self.__franchise_df,
            "firstyear":        self.firstYear,
            "recentyear":       self.recentYear,
            "fullname":         self.fullName,
            "locationname":     self.locationName,
            "clubname":         self.clubName,
            "mlbam":            self.mlbam,
            "franchid":         self.franchID,
            "bbrefid":          self.bbrefID,
            "retroid":          self.retroID,
            "filecode":         self.fileCode,
            "league":           self.__lgDiv,
            "venue_mlbam":      self.curr_venue_mlbam,
            "venues":           self.venues,
            "gp":               self.__total_GP,
            "gamesplayed":      self.__total_GP,
            "games_played":     self.__total_GP,
            "wins":             self.__total_wins,
            "w":                self.__total_wins,
            "losses":           self.__total_losses,
            "l":                self.__total_losses,
        }
    
    def __repr__(self) -> str:
        return f"""<SimpleStats Franchise - '{self.fullName}' | mlbam ID: '{self.mlbam}' | baseball-reference ID: '{self.bbrefID}' | years: '{self.firstYear} - {self.recentYear}'>"""

    def __getitem__(self,item):
        return getattr(item)

    def info(self):
        numYears = self.recentYear - self.firstYear+1
        activeYears = f"{self.firstYear} - {self.recentYear}"
        games_played = self.__total_GP
        wins = self.__total_wins
        losses = self.__total_losses
        venues = self.venues
        return {"numYears":numYears,"activeYears":activeYears,"gamesPlayed":games_played,"totalWins":wins,"totalLosses":losses,"venues":venues}

    def ybyRecords(self,return_type="df"):
        if return_type == "df":
            return self.__ybyRecords.reset_index(drop=True)
        elif return_type == "prefmt":
            # return tabulate(self.__ybyRecords.reset_index(drop=False),"keys","simple",numalign="center",stralign="left")
            pass

    def ybyStats(self,group,combined=True,return_type="df"):
        """Doc string needed"""
        if group.lower() not in ("hitting","hittingadv","pitching","pitchingadv","fielding"):
            print(f"get value, '{group}' not a valid parameter")
            return None

        if combined is False:
            return self.__ybyStats[group]

        if "hitting" in group.lower():
            reg_df = self.__ybyStats["hitting"].set_index("Season",drop=False)
            adv_df = self.__ybyStats["hittingAdv"].set_index("Season")
            combined = reg_df.join(adv_df)
            combined = combined.reset_index(drop=True)
        elif "pitching" in group.lower():
            reg_df = self.__ybyStats["pitching"].set_index("Season",drop=False)
            adv_df = self.__ybyStats["pitchingAdv"].set_index("Season")
            combined = reg_df.join(adv_df)
            combined = combined.reset_index(drop=True)
        elif "fielding" in group.lower():
            combined = self.__ybyStats["fielding"]
        else:
            print("Options are 'hitting', 'pitching' or 'fielding'")
            return None
        if return_type == "df":
            return combined
        elif return_type == "prefmt":
            # return tabulate(combined,"keys","simple",numalign="center",stralign="left",showindex=False)
            pass
        elif return_type == "html":
            return combined

    def playoffHistory(self):
        pass # postseason appearance function is WIP
        # return self.__postseason_appearances

    def mlbam(self):
        return self.mlbam

    def franchID(self):
        return self.franchID

    def fullName(self,year=None):
        if year is None:
            return self.fullName
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["fullName"].item()

    def locationName(self,year=None):
        if year is None:
            return self.locationName
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["locationName"].item()

    def clubName(self,year=None):
        if year is None:
            return self.clubName
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["clubName"].item()

    def bbrefID(self,year=None):
        if year is None:
            return self.bbrefID
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["bbrefID"].item()

    def retroID(self,year=None):
        if year is None:
            return self.retroID
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["retroID"].item()

