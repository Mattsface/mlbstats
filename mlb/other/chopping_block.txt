class League:
    """Represents an instance of MLB for given season (default is the current year)
    
    Params
    ------
    season : str or int
        season (year) to retrieve league stats/data for
    
    Methods
    -------
    team_hitting() - get league hitting stats by team
    
    team_pitching() - get league pitching stats by team
    
    team_fielding() - get league fielding stats by team
    
    player_hitting() - get league hitting stats by player
    
    player_pitching() - get league pitching stats by player
    
    player_fielding() - get league fielding stats by player
        
    leaders() - not configured
    
    team_splits() - not configured
    

    """
    def __init__(self,season=None):
        if season is None:
            self.season = curr_year
        else:
            self.season = int(season)

        with requests.Session() as sesh:
            self._teamstats = league.team_stats(self.season,sesh=sesh)
            self._playerstats = league.player_stats(self.season,sesh=sesh)
            # self._standings = league.standings(self.season,sesh=sesh)
        
        self._teamHitting = self._teamstats['hitting']
        self._teamPitching = self._teamstats['pitching']
        self._teamFielding = self._teamstats['fielding']
        self._teamHittingAdvanced = self._teamstats['hittingAdvanced']
        self._teamPitchingAdvanced = self._teamstats['pitchingAdvanced']

        self._playerHitting = self._playerstats['hitting']
        self._playerPitching = self._playerstats['pitching']
        self._playerFielding = self._playerstats['fielding']
        self._playerHittingAdvanced = self._playerstats['hittingAdvanced']
        self._playerPitchingAdvanced = self._playerstats['pitchingAdvanced']

        yby_records = get_yby_records()
        self._mlb_standings = yby_records[yby_records["season"]==self.season]
        
    def standings(self,*args):
        """Get Standings for a given season
        
        Return specified league or division standings by specifying `kwargs`
        
        Accepted args:
        -----------
        league: specify by league abbrv or league name

        leagueID: specify by leagueID (mlbam)

        division: specify by division abbrv or division name
                NOTE: must be specific, like `division="AL West"` (NOT `division = "West"`)

        divisionID: specify by divisionID

        """
        df = self._mlb_standings
        if len(args) == 0:
            return df

        lg_mlbams = []
        div_mlbams = []
        for arg in args:
            if type(arg) is int:
                if arg in [103,104]:
                    lg_mlbams.append(str(arg))
                if arg in [200,201,202,203,204,205]:
                    div_mlbams.append(str(arg))
            elif type(arg) is str:
                if arg.lower() in ["al","american","american league"]:
                    lg_mlbams.append('103')
                elif arg.lower() in ["nl","national","national league"]:
                    lg_mlbams.append('104')
                elif arg.lower() in ["alw","al w","alwest","al west"]:
                    div_mlbams.append('200')
                elif arg.lower() in ["ale","al e","aleast","al east"]:
                    div_mlbams.append('201')
                elif arg.lower() in ["alc","al c","alcentral","al central","alcent","al cent"]:
                    div_mlbams.append('202')
                elif arg.lower() in ["nlw","nl w","nlwest","nl west"]:
                    div_mlbams.append('203')
                elif arg.lower() in ["nle","nl e","nleast","nl east"]:
                    div_mlbams.append('204')
                elif arg.lower() in ["nlc","nl c","nlcentral","nl central","nlcent","nl cent"]:
                    div_mlbams.append('205')

        if lg_mlbams != []:
            df = df[df["lg_mlbam"].isin(lg_mlbams)]
        if div_mlbams != []:
            df = df[df["div_mlbam"].isin(div_mlbams)]

        return df.sort_values(by="W%",ascending=False)

    def team_hitting(self,league='all',division='all'):
        if type(division) is int:
            reg = self._teamHitting
            adv = self._teamHittingAdvanced
            df = reg.merge(adv)
            df = df[df['div_mlbam']==division]
            return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif division == 'all':
            if league.lower() == 'all':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='AL']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='NL']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'west' in division.lower():
            if league.lower() == 'all':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='West']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='West')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='West')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'east' in division.lower():
            if league.lower() == 'all':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='East']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='East')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='East')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'central' in division.lower():
            if league.lower() == 'all':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='Central']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='Central')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamHitting
                adv = self._teamHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='Central')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

    def team_pitching(self,league='all',division='all'):
        if type(division) is int:
            reg = self._teamPitching
            adv = self._teamPitchingAdvanced
            df = reg.merge(adv)
            df = df[df['div_mlbam']==division]
            return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif division == 'all':
            if league.lower() == 'all':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='AL']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='NL']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'west' in division.lower():
            if league.lower() == 'all':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='West']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='West')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='West')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'east' in division.lower():
            if league.lower() == 'all':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='East']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='East')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='East')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'central' in division.lower():
            if league.lower() == 'all':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='Central']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='Central')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._teamPitching
                adv = self._teamPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='Central')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

    def team_fielding(self,league='all',division='all'):

        if type(division) is int:
            df = self._teamFielding
            df = df[df['div_mlbam']==division]
            return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif division == 'all':
            if league.lower() == 'all':
                df = self._teamFielding
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._teamFielding
                df = df[df['Lg']=='AL']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._teamFielding
                df = df[df['Lg']=='NL']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'west' in division.lower():
            if league.lower() == 'all':
                df = self._teamFielding
                df = df[df['Div']=='West']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._teamFielding
                df = df[(df['Lg']=='AL') & (df['Div']=='West')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._teamFielding
                df = df[(df['Lg']=='NL') & (df['Div']=='West')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'east' in division.lower():
            if league.lower() == 'all':
                df = self._teamFielding
                df = df[df['Div']=='East']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._teamFielding
                df = df[(df['Lg']=='AL') & (df['Div']=='East')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._teamFielding
                df = df[(df['Lg']=='NL') & (df['Div']=='East')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

        elif 'central' in division.lower():
            if league.lower() == 'all':
                df = self._teamFielding
                df = df[df['Div']=='Central']
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._teamFielding
                df = df[(df['Lg']=='AL') & (df['Div']=='Central')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._teamFielding
                df = df[(df['Lg']=='NL') & (df['Div']=='Central')]
                return df.sort_values(by='Team',ascending=True).reset_index(drop=True)

    def player_hitting(self,league='all',division='all'):
        if type(division) is int:
            reg = self._playerHitting
            adv = self._playerHittingAdvanced
            df = reg.merge(adv)
            df = df[df['div_mlbam']==division]
            return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif division == 'all':
            if league.lower() == 'all':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='AL']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='NL']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'west' in division.lower():
            if league.lower() == 'all':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='West']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='West')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='West')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'east' in division.lower():
            if league.lower() == 'all':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='East']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='East')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='East')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'central' in division.lower():
            if league.lower() == 'all':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='Central']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='Central')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerHitting
                adv = self._playerHittingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='Central')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

    def player_pitching(self,league='all',division='all'):
        if type(division) is int:
            reg = self._playerPitching
            adv = self._playerPitchingAdvanced
            df = reg.merge(adv)
            df = df[df['div_mlbam']==division]
            return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif division == 'all':
            if league.lower() == 'all':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='AL']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Lg']=='NL']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'west' in division.lower():
            if league.lower() == 'all':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='West']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='West')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='West')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'east' in division.lower():
            if league.lower() == 'all':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='East']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='East')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='East')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'central' in division.lower():
            if league.lower() == 'all':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[df['Div']=='Central']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='AL') & (df['Div']=='Central')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                reg = self._playerPitching
                adv = self._playerPitchingAdvanced
                df = reg.merge(adv)
                df = df[(df['Lg']=='NL') & (df['Div']=='Central')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

    def player_fielding(self,league='all',division='all'):

        if type(division) is int:
            df = self._playerFielding
            df = df[df['div_mlbam']==division]
            return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif division == 'all':
            if league.lower() == 'all':
                df = self._playerFielding
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._playerFielding
                df = df[df['Lg']=='AL']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._playerFielding
                df = df[df['Lg']=='NL']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'west' in division.lower():
            if league.lower() == 'all':
                df = self._playerFielding
                df = df[df['Div']=='West']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._playerFielding
                df = df[(df['Lg']=='AL') & (df['Div']=='West')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._playerFielding
                df = df[(df['Lg']=='NL') & (df['Div']=='West')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'east' in division.lower():
            if league.lower() == 'all':
                df = self._playerFielding
                df = df[df['Div']=='East']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._playerFielding
                df = df[(df['Lg']=='AL') & (df['Div']=='East')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._playerFielding
                df = df[(df['Lg']=='NL') & (df['Div']=='East')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

        elif 'central' in division.lower():
            if league.lower() == 'all':
                df = self._playerFielding
                df = df[df['Div']=='Central']
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'al':
                df = self._playerFielding
                df = df[(df['Lg']=='AL') & (df['Div']=='Central')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)
            elif league.lower() == 'nl':
                df = self._playerFielding
                df = df[(df['Lg']=='NL') & (df['Div']=='Central')]
                return df.sort_values(by='Player',ascending=True).reset_index(drop=True)

    def leaders(self):
        pass

    def team_splits(self):
        pass


class Team:
    """# Team

    teamID : str | int
        Team's official MLB ID
    season : str | int
        specific season to retrieve data for
    """
    def __init__(self,teamID,season=None) -> None:
        if season is None:
            season = default_season()

        self.__info             = utils_team.team(teamID,season)
        self.__year             = season
        self.__team_df          = self.__info["team_df"]
        self.__franchise_df     = self.__info["franchise_df"]
        self.__mlbam            = self.__info["mlbam"]
        self.__bbrefID          = self.__info["bbrefID"]
        self.__franchID         = self.__info["franchID"]
        self.__retroID          = self.__info["retroID"]
        self.__mlbID            = self.__info["mlbID"]
        self.__fullName         = self.__info["fullName"]
        self.__lgAbbrv          = self.__info["lgAbbrv"]
        self.__locationName     = self.__info["locationName"]
        self.__clubName         = self.__info["clubName"]
        self.__venueName        = self.__info["venueName"]
        self.__venue_mlbam      = self.__info["venue_mlbam"]
        self.__firstYear        = self.__info["firstYear"]

        async_response = get_team_responses(self.__mlbam,season)
        self.__roster_stats        = async_response["roster_stats"]
        self.__game_log          = async_response["game_log"]
        self.__game_stats        = async_response["game_stats"]
        self.__team_stats        = async_response["team_stats"]
        self.__leaders_hitting   = async_response["leaders_hitting"]
        self.__leaders_pitching  = async_response["leaders_pitching"]
        self.__leaders_fielding  = async_response["leaders_fielding"]
        self.__transactions      = async_response["transactions"]
        self.__draft             = async_response["draft"]

        self.__hitting = self.__team_stats["hitting"]
        self.__hittingAdv = self.__team_stats["hittingAdvanced"]
        self.__pitching = self.__team_stats["pitching"]
        self.__pitchingAdv = self.__team_stats["pitchingAdvanced"]
        self.__fielding = self.__team_stats["fielding"]

        ybyRecords = get_yby_records()
        self.__yby_records = ybyRecords[(ybyRecords["season"]==season) & (ybyRecords["tm_mlbam"]==self.__mlbam)]

        self.__div_mlbam = self.__yby_records.div_mlbam.item()
        self.__div_standings = ybyRecords[(ybyRecords["season"]==season) & (ybyRecords["div_mlbam"]==self.__div_mlbam)]

        self.__wins      = self.__yby_records.W.item()
        self.__losses    = self.__yby_records.L.item()

        # self.__records_dict = self.__team_stats["records_dict"]

        # stats = team.stats(self.__mlbam)
        # self.__hitting = stats["hitting"]
        # self.__hittingAdv = stats["hittingAdvanced"]
        # self.__pitching = stats["pitching"]
        # self.__pitchingAdv = stats["pitchingAdvanced"]
        # self.__fielding = stats["fielding"]
        # self.__records_dict = stats["records_dict"]

        # self.__roster_stats = team.roster_stats(self.__mlbam,season=self.__year)
        # self.game_log = team.game_log(self.__mlbam,season=self.__year)

        self.__set_team_attrs()        

    def __repr__(self) -> str:
        return f"""< SimpleStats Team - '{self.__fullName}' | mlbam ID: '{self.__mlbam}' | baseball-reference ID: '{self.__bbrefID}' >"""

    def __getitem__(self,item):
        return self.__attrs[item]

    def __set_team_attrs(self):
        self.__attrs = {
            "mlbam":        self.__mlbam,
            "bbrefID":      self.__bbrefID,
            "franchID":     self.__franchID,
            "fullName":     self.__fullName,
            "wins":         self.__wins,
            "losses":       self.__losses
        }


    def full_name(self):
        """Return the team's full name"""
        return self.__fullName
    
    def club_name(self):
        """Returns the team's club name"""
        return self.__clubName 

    def loc_name(self):
        """Return CITY that team is named after"""
        return self.__locationName

    def season_record(self):
        return f"{self.__wins}-{self.__losses}"

    def standings_division(self):
        cols = ["tm_mlbam","tm_name","G","W","L","R","RA","RunDiff"]
        df = self.__div_standings[cols]
        return df

    def franchise_df(self):
        return self.__franchise_df

    def leaders(self,group,return_type="dict"):
        """
        Returns a dictionary (or df -- COMING SOON) of top players in different categories
        
        Required:
        --------
        - group:    'hitting', 'pitching', 'fielding' ('h', 'p', 'f' for shorthand)
        
        - return_type:  'dict' or 'df'
        """
        if group == "hitting" or group == "h":
            categories = {}
            rows = []
            leaders = self.__leaders_hitting
            for cat,leaders in leaders.items():
                rows = []
                for leader in leaders:
                    row = []
                    for val in leader.values():
                        row.append(val)
                    rows.append(row)
                df = pd.DataFrame(data=rows,columns=list(leaders[0].keys()))
                categories[cat] = df
            return categories


        elif group == "pitching" or group == "p":
            return self.__leaders_pitching
        elif group == "fielding" or group == "f":
            return self.__leaders_fielding

    def season_records(self):
        return self.__yby_records

    def venue(self):
        return self.__venueName

    def hitting(self,*args):
        totals = False
        if len(args) == 1 and args[0] == 'totals':
            totals = True
        if totals is False:
            df = self.__roster_stats["hitting"]
            all_p = df[df["primaryPosition"]=="P"]
            all_non_p = df[df["primaryPosition"]!="P"]
            df = pd.concat([all_non_p,all_p])
        else:
            df = self.__hitting

        return df

    def hitting_advanced(self,*args):
        totals = False
        if len(args) == 1 and args[0] == 'totals':
            totals = True
        if totals is False:
            df = self.__roster_stats["hittingAdvanced"]
            all_p = df[df["primaryPosition"]=="P"]
            all_non_p = df[df["primaryPosition"]!="P"]
            df = pd.concat([all_non_p,all_p])
        else:
            df = self.__hittingAdv

        return df

    def pitching(self,*args):
        totals = False
        if len(args) == 1 and args[0] == 'totals':
            totals = True
        if totals is False:
            df = self.__roster_stats["pitching"]
            all_p = df[df["primaryPosition"]=="P"]
            all_non_p = df[df["primaryPosition"]!="P"]
            df = pd.concat([all_p,all_non_p])
        else:
            df = self.__pitching

        return df

    def pitching_advanced(self,*args):
        totals = False
        if len(args) == 1 and args[0] == 'totals':
            totals = True
        if totals is False:
            df = self.__roster_stats["pitchingAdvanced"]
            all_p = df[df["primaryPosition"]=="P"]
            all_non_p = df[df["primaryPosition"]!="P"]
            df = pd.concat([all_p,all_non_p])
        else:
            df = self.__pitchingAdv

        return df

    def fielding(self,*args):
        totals = False
        if len(args) == 1 and args[0] == 'totals':
            totals = True
        if totals is False:
            df = self.__roster_stats["fielding"]
        else:
            df = self.__fielding

        return df

    def game_stats(self,group=None):
        """
        Get hitting, pitching, and fielding stats for each game for the given year

        (Not fully developed yet)
        ADD FUNCTIONALITY TO GROUP BY OPPOSING TEAM
        """
        stats = self.__game_stats
        hitting = stats["hitting"].drop(columns=["G#"]) # column may be misleading to users but is helpful to ensure correct order of games when it comes to double headers
        pitching = stats["pitching"].drop(columns=["G#"])
        fielding = stats["fielding"].drop(columns=["G#"])
        if group is None:
            return {"hitting":hitting,"pitching":pitching,"fielding":fielding}
        else:
            return stats[group].drop(columns=["G#"])

    def game_log(self):
        stats = self.__game_log
        return stats

    def team_splits(self,season=None,s_type="b"):
        if season is None:
            season = self.__year
        return utils_team.bbrefSplits(self.__bbrefID,season=season,s_type=s_type)

    def transactions(self):
        df = self.__transactions
        df.sort_values(by=["date"],ascending=False,inplace=True)
        colmap = {
            "player":"Player",
            "f_team":"From Team",
            "t_team":"To Team",
            "date":"Date",
            "eff_date":"Effective Date",
            "trx_code":"Code",
            "trx_type":"Transaction",
            "description":"Description"
        }
        df = df[["player","f_team","t_team","date","eff_date","trx_code","trx_type","description"]]
        return df.rename(columns=colmap)

    def draft_picks(self):
        d = self.__draft.to_dict("records")
        return self.__draft


    def team_hitting(self):
        """
        Get ALL team hitting stat totals/avgs
        """
        reg = self.__hitting
        adv = self.__hittingAdv
        df = reg.merge(adv)

        return df

    def team_hitting_reg(self):
        """
        Get REGULAR team hitting stat totals/avgs
        """
        df = self.__hitting

        return df

    def team_hitting_adv(self):
        """
        Get ADVANCED team hitting stat totals/avgs
        """
        df = self.__hittingAdv
        return df

    def team_pitching(self):
        """
        Get ALL team pitching stat totals/avgs
        """
        reg = self.__pitching
        adv = self.__pitchingAdv
        df = reg.merge(adv)
        return df

    def team_pitching_reg(self):
        """
        Get REGULAR team pitching stat totals/avgs
        """
        cols = ['GP','GS','GF','W','L','W%','AB','ERA','H','R','ER','2B','3B','HR','SO','BB','IBB','WHIP','IP','P','TB','K','K%','BF','HBP','CG','ShO','SV', 'SVO','BS','HLD']
        df = self.__pitching.merge(self.__pitchingAdv)
        return df[cols]

    def team_pitching_adv(self):
        """
        Get REGULAR team pitching stat totals/avgs
        """
        cols = ['AVG','OBP','SLG','OPS','CS','SB','SB%','O','GO','AO', 'GO/AO','GIDP','BK','WP','PK','sB','sF','P/Inn','SO:BB','SO/9','BB/9','H/9','R/9','HR/9','CI','IR','IRS','BABIP','QS','GIDPO','TS','Whiffs','BIP','RS','P/PA','BB/PA','SO/PA','HR/PA','BB/SO','ISO','FO','PO','LO','GH','FH','PH','LH']
        df = self.__pitching.merge(self.__pitchingAdv)
        return df[cols]

    def team_fielding(self):
        """Get team fielding stat totals/avgs"""
        df = self.__fielding
        return df

    def player_hitting(self):
        """
        Get hitting stats for all players on team
        """
        reg = self.__roster_stats["hitting"]
        adv = self.__roster_stats["hittingAdvanced"]
        df = reg.merge(adv)
        allPs = df[df["primaryPosition"]=="P"]
        nonPs = df[df["primaryPosition"]!="P"]
        df = pd.concat([nonPs,allPs])
        return df

    def player_hitting_reg(self):
        """
        Get REGULAR hitting stats for all players on team
        """

        df = self.__roster_stats["hitting"]
        return df

    def player_hitting_adv(self):
        """
        Get ADVANCED hitting stats for all players on team
        """
        df = self.__roster_stats["hittingAdvanced"]
        return df

    def player_pitching(self):
        """
        Get pitchings stats for all pitchers on team
        """
        reg = self.__roster_stats["pitching"]
        adv = self.__roster_stats["pitchingAdvanced"]
        df = reg.merge(adv)
        return df

    def player_pitching_reg(self):
        """
        Get REGULAR pitching stats for all pitchers on team
        """
        df = self.__roster_stats["pitching"]
        return df

    def player_pitching_adv(self):
        """
        Get ADVANCED pitching stats for all pitchers on team
        """
        df = self.__roster_stats["pitchingAdvanced"]
        return df

    def player_fielding(self):
        """
        Get fielding stats for all players on team
        """
        df = self.__roster_stats["fielding"]
        active = df[df["status"]=="Active"]
        non_active = df[df["status"]!="Active"]
        df = pd.concat([active,non_active])
        return df



class Franchise:
    """
    # Franchise

    teamID : str | int
        Team's official MLB ID
    """
    def __init__(self,teamID):
        _info = franchise.franchise_info(teamID)

        self.__franchise_df      = _info["franchise_df"]
        self.firstYear           = _info["firstYear"]
        self.recentYear          = _info["recentYear"]
        self.fullName            = _info["fullName"]
        self.locationName        = _info["locationName"]
        self.clubName            = _info["clubName"]
        self.mlbam               = _info["mlbam"]
        self.franchID            = _info["franchID"]
        self.bbrefID             = _info["bbrefID"]
        self.retroID             = _info["retroID"]
        self.fileCode            = _info["fileCode"]
        self.__lgDiv             = _info["lgDiv"]
        self.curr_venue_mlbam  = _info["venueCurrent_mlbam"]
        self.__venueList         = _info["venueList"]
        self.venues            = _info["venueDict"]

        self.__ybyRecords        = franchise.franchise_records(teamID)
        self.__ybyStats          = franchise.franchise_stats(self.mlbam)

        self.__total_GP          = self.__ybyRecords.G.astype("int").sum()
        self.__total_wins        = self.__ybyRecords.W.astype("int").sum()
        self.__total_losses      = self.__ybyRecords.L.astype("int").sum()
        self.gp                  = self.__total_GP
        self.w                   = self.__total_wins
        self.l                   = self.__total_losses

        # self.__postseason_appearances = _info["postseason_appearances"] # postseason appearance function is WIP

        self.__attrs = {
            "franchise":        self.__franchise_df,
            "firstyear":        self.firstYear,
            "recentyear":       self.recentYear,
            "fullname":         self.fullName,
            "locationname":     self.locationName,
            "clubname":         self.clubName,
            "mlbam":            self.mlbam,
            "franchid":         self.franchID,
            "bbrefid":          self.bbrefID,
            "retroid":          self.retroID,
            "filecode":         self.fileCode,
            "league":           self.__lgDiv,
            "venue_mlbam":      self.curr_venue_mlbam,
            "venues":           self.venues,
            "gp":               self.__total_GP,
            "gamesplayed":      self.__total_GP,
            "games_played":     self.__total_GP,
            "wins":             self.__total_wins,
            "w":                self.__total_wins,
            "losses":           self.__total_losses,
            "l":                self.__total_losses,
        }
    
    def __repr__(self) -> str:
        return f"""<SimpleStats Franchise - '{self.fullName}' | mlbam ID: '{self.mlbam}' | baseball-reference ID: '{self.bbrefID}' | years: '{self.firstYear} - {self.recentYear}'>"""

    def __getitem__(self,item):
        return getattr(item)

    def info(self):
        numYears = self.recentYear - self.firstYear+1
        activeYears = f"{self.firstYear} - {self.recentYear}"
        games_played = self.__total_GP
        wins = self.__total_wins
        losses = self.__total_losses
        venues = self.venues
        return {"numYears":numYears,"activeYears":activeYears,"gamesPlayed":games_played,"totalWins":wins,"totalLosses":losses,"venues":venues}

    def ybyRecords(self,return_type="df"):
        if return_type == "df":
            return self.__ybyRecords.reset_index(drop=True)
        elif return_type == "prefmt":
            # return tabulate(self.__ybyRecords.reset_index(drop=False),"keys","simple",numalign="center",stralign="left")
            pass

    def ybyStats(self,group,combined=True,return_type="df"):
        """Doc string needed"""
        if group.lower() not in ("hitting","hittingadv","pitching","pitchingadv","fielding"):
            print(f"get value, '{group}' not a valid parameter")
            return None

        if combined is False:
            return self.__ybyStats[group]

        if "hitting" in group.lower():
            reg_df = self.__ybyStats["hitting"].set_index("Season",drop=False)
            adv_df = self.__ybyStats["hittingAdv"].set_index("Season")
            combined = reg_df.join(adv_df)
            combined = combined.reset_index(drop=True)
        elif "pitching" in group.lower():
            reg_df = self.__ybyStats["pitching"].set_index("Season",drop=False)
            adv_df = self.__ybyStats["pitchingAdv"].set_index("Season")
            combined = reg_df.join(adv_df)
            combined = combined.reset_index(drop=True)
        elif "fielding" in group.lower():
            combined = self.__ybyStats["fielding"]
        else:
            print("Options are 'hitting', 'pitching' or 'fielding'")
            return None
        if return_type == "df":
            return combined
        elif return_type == "prefmt":
            # return tabulate(combined,"keys","simple",numalign="center",stralign="left",showindex=False)
            pass
        elif return_type == "html":
            return combined

    def playoffHistory(self):
        pass # postseason appearance function is WIP
        # return self.__postseason_appearances

    def mlbam(self):
        return self.mlbam

    def franchID(self):
        return self.franchID

    def fullName(self,year=None):
        if year is None:
            return self.fullName
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["fullName"].item()

    def locationName(self,year=None):
        if year is None:
            return self.locationName
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["locationName"].item()

    def clubName(self,year=None):
        if year is None:
            return self.clubName
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["clubName"].item()

    def bbrefID(self,year=None):
        if year is None:
            return self.bbrefID
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["bbrefID"].item()

    def retroID(self,year=None):
        if year is None:
            return self.retroID
        else:
            return self.__franchise_df[self.__franchise_df["yearID"]==year]["retroID"].item()



class Player:
    """
    # Player

    Parameters
    ----------

    playerID : str | int
        player's official MLB ID
    """
    def __init__(self,playerID):
        _player = player_mod.player(playerID)
        self.mlbam              = _player["mlbam"]
        self.bbrefID            = _player["bbrefID"]
        self.retroID            = _player["retroID"]
        self.bbrefIDminors      = _player["bbrefIDminors"]
        self.primaryPosition    = _player["primaryPosition"]
        self.fullName           = _player["fullName"]
        self.firstName          = _player["firstName"]
        self.lastName           = _player["lastName"]
        self.nickName           = _player["nickName"]
        self.primaryNumber      = _player["primaryNumber"]
        self.currentAge         = _player["currentAge"]
        self.birthDate          = _player["birthDate"]
        self.birthCity          = _player["birthCity"]
        self.birthState         = _player["birthState"]
        self.birthCountry       = _player["birthCountry"]
        self.deathDate          = _player["deathDate"]
        self.deathCity          = _player["deathCity"]
        self.deathState         = _player["deathState"]
        self.deathCountry       = _player["deathCountry"]
        self.weight             = _player["weight"]
        self.height             = _player["height"]
        self.bats               = _player["bats"]
        self.throws             = _player["throws"]
        self.education          = _player["education"]
        self.firstYear          = _player["firstYear"]
        self.lastYear           = _player["lastYear"]
        self.zoneBot            = _player["zoneBot"]
        self.zoneTop            = _player["zoneTop"]
        self.isActive           = _player["isActive"]
        
        self.__roster_entries   = _player["rosterEntries"]
        self.__transactions     = _player["transactions"]
        self.__drafts           = _player["drafts"]
        self.__awards           = _player["awards"]

        try:
            self.birth_dt = dt.datetime.strptime(_player['birthDate'],r"%Y-%m-%d")
        except:
            self.birth_dt = None

        try:
            self.death_dt = dt.datetime.strptime(_player['deathDate'],r"%Y-%m-%d")
        except:
            self.death_dt = None
        

        # Stats Data
        hitting =  _player["hitting"]
        pitching = _player["pitching"]
        fielding = _player["fielding"]

        self.__hitting_recent = hitting["recentSeason"]
        self.__hitting_yby = hitting["yby"]
        self.__hitting_yby_adv = hitting["ybyAdv"]
        self.__hitting_career_reg = hitting["careerReg"]
        self.__hitting_career_reg_adv = hitting["careerAdvReg"]
        self.__hitting_career_post = hitting["careerPost"]
        self.__hitting_career_post_adv = hitting["careerAdvPost"]

        self.__pitching_recent = pitching["recentSeason"]
        self.__pitching_yby = pitching["yby"]
        self.__pitching_yby_adv = pitching["ybyAdv"]
        self.__pitching_career_reg = pitching["careerReg"]
        self.__pitching_career_reg_adv = pitching["careerAdvReg"]
        self.__pitching_career_post = pitching["careerPost"]
        self.__pitching_career_post_adv = pitching["careerAdvPost"]

        self.__fielding_recent = fielding["recentSeason"]
        self.__fielding_career_reg = fielding["careerReg"]
        self.__fielding_career_post = fielding["careerPost"]
        self.__fielding_yby = fielding["yby"]

    def __repr__(self) -> str:
        if self.isActive:
            status = "active"
        else:
            status = "inactive"
        return f"""<SimpleStats Player - '{self.fullName}' | mlbam ID: '{self.mlbam}' | baseball-reference ID: '{self.bbrefID}' | status: '{status}'>"""

    def __getitem__(self,item):
        return getattr(self,item)
    
    def __setitem__(self,key,value):
        setattr(self,key,value)

    def career_stats(self,group,advanced=False):
        """Career Stats
        
        Returns `pandas.Dataframe` of player's CAREER stats:

        - Valid values for `group` parameter are "hitting", "pitching", or "fielding"
        - If `advanced` is `True`, class method will return a dataframe of player's advanced stats
        
        """
        if group == "hitting":
            if advanced is True:
                return self.__hitting_career_reg_adv
            return self.__hitting_career_reg
        elif group == "pitching":
            if advanced is True:
                return self.__pitching_career_reg_adv
            return self.__pitching_career_reg
        elif group == "fielding":
            return self.__fielding_career_reg

    def yby_stats(self,group,advanced=False):
        """
        # Year-by-Year Stats
        Returns `pandas.Dataframe` of player's YEAR-BY-YEAR stats:
        - Valid values for `group` parameter are "hitting", "pitching", or "fielding"
        - If `advanced` is `True`, class method will return a dataframe of player's advanced stats
        """
        if group == "hitting":
            if advanced is True:
                df = self.__hitting_yby_adv
            else: 
                df = self.__hitting_yby
            if df is not False:
                return df.sort_values(by="season",ascending=False)
            else:
                return None
        elif group == "pitching":
            if advanced is True:
                df = self.__pitching_yby_adv
            else: 
                df = self.__pitching_yby
            if df is not False:
                return df.sort_values(by="season",ascending=False)
            else:
                return None
        elif group == "fielding":
            df = self.__fielding_yby
            if df is not False:
                return df.sort_values(by="season",ascending=False)
            else:
                return None

    def summary_stats(self,group):
        """
        # Recent Season Stats
        Returns `pandas.Dataframe` of player's most RECENT SEASON stats:
        - Valid values for `group` parameter are "hitting", "pitching", or "fielding"
        - If `advanced` is `True`, class method will return a dataframe of player's advanced stats
        """

        if group == "hitting":
            try:
                recentYear = self.__hitting_yby.sort_values(by="Year",ascending=False)
                recentYear = recentYear.iloc[[0]]
                year_value = recentYear["Year"].item()
                combined = pd.concat([self.__hitting_career_reg,recentYear]).drop(columns=["Year","Team"])
                combined.insert(0,"",["Career",year_value])
                return combined
            except:
                return None
        elif group == "pitching":
            try:
                recentYear = self.__pitching_yby.sort_values(by="Year",ascending=False)
                recentYear = recentYear.iloc[[0]]
                year_value = recentYear["Year"].item()
                combined = pd.concat([self.__pitching_career_reg,recentYear]).drop(columns=["Year","Team"])
                combined.insert(0,"",["Career",year_value])
                return combined
            except:
                return None
        elif group == "fielding":
            try:
                recentYear = self.__fielding_yby.sort_values(by="Year",ascending=False)
                year_value = recentYear.iloc[0]["Year"]
                recentYear = recentYear[(recentYear["Year"]==year_value) & (recentYear["Pos"]!="DH")]
                recentYear.insert(0,"",year_value)
                recentYear.sort_values(by="G",ascending=False,inplace=True)

                career = self.__fielding_career_reg
                career = career[career["Pos"]!="DH"]
                career.insert(0,"","Career")

                combined = pd.concat([career,recentYear]).drop(columns=["Year","Team"]).fillna("--")
                return combined
            except:
                return None

    def game_logs(self,group,year=None):
        """
        Returns `pandas.Dataframe` of player's stats for each game in a given season:
        """
        if year is None: year = curr_year
        if group == "hitting":
            log = player.hittingLog(self.bbrefID,year)
        elif group == "pitching":
            log = player.pitchingLog(self.bbrefID,year)
        elif group == "fielding":
            log = player.fieldingLog(self.bbrefID,year)
        return log

    def metricLog(self):
        """NOT YET CONFIGURED"""
        pass

    def hitting_splits(self,year=curr_year):
        bat_splits = player.bbrefSplits(self.bbrefID,year,"b")
        return bat_splits

    def pitching_splits(self,year=curr_year):
        _pitch_splits = player.bbrefSplits(self.bbrefID,year,"p")
        return _pitch_splits

    def roster_entries(self):
        return self.__roster_entries

    def arsenal(self):
        pass

    def draft(self):
        return self.__drafts

    def awards(self):
        return self.__awards

    def transactions(self):
        return self.__transactions

